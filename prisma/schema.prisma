// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  image           String?
  emailVerified   DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Google OAuth tokens (encrypted)
  accessToken     String?
  refreshToken    String?
  tokenExpiresAt  DateTime?
  
  // Gmail settings
  gmailWatchExpiry DateTime?
  historyId       String?
  
  // User preferences
  businessTone    String    @default("professional")
  customInstructions String?
  autoRespond     Boolean   @default(true)
  
  // Relations
  labels          Label[]
  faqs            FAQ[]
  emailLogs       EmailLog[]
  accounts        Account[]
  sessions        Session[]
  
  @@map("users")
}

model Label {
  id          String @id @default(cuid())
  name        String
  color       String @default("#000000")
  gmailLabelId String?
  userId      String
  createdAt   DateTime @default(now())
  
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailLogs   EmailLog[]
  
  @@unique([userId, name])
  @@map("labels")
}

model FAQ {
  id        String   @id @default(cuid())
  question  String
  answer    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("faqs")
}

model EmailLog {
  id              String    @id @default(cuid())
  gmailMessageId  String    @unique
  gmailThreadId   String
  subject         String?
  fromEmail       String
  fromName        String?
  receivedAt      DateTime
  
  // AI Classification
  intent          String?
  confidence      Float?
  
  // Response
  responseGenerated Boolean @default(false)
  draftCreated    Boolean @default(false)
  gmailDraftId    String?
  
  // Relations
  userId          String
  labelId         String?
  
  user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  label           Label? @relation(fields: [labelId], references: [id])
  
  createdAt       DateTime @default(now())
  
  @@map("email_logs")
}

// NextAuth required tables
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}